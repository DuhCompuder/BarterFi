/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { ContractsInSwayAbi, ContractsInSwayAbiInterface } from "../ContractsInSwayAbi";

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum AccessControlError",
      "components": [
        {
          "name": "OnlyAdminsCanAccess",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ApplicationNotApproved",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum ApplicationState",
      "components": [
        {
          "name": "Pending",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Approved",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Denied",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum ApplicationStatusEvent",
      "components": [
        {
          "name": "ApplicationApproved",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ApplicationRejected",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "enum InitError",
      "components": [
        {
          "name": "CannotReinitialize",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "NotInitialized",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        9
      ]
    },
    {
      "typeId": 9,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct Address",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct Application",
      "components": [
        {
          "name": "barrower",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "requested_amount",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "credit_score",
          "type": 13,
          "typeArguments": null
        },
        {
          "name": "state",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "loan_id",
          "type": 8,
          "typeArguments": [
            {
              "name": "",
              "type": 14,
              "typeArguments": null
            }
          ]
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct ContractId",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "u16",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "u64",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "barrower",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "requested_amount",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "credit_score",
          "type": 13,
          "typeArguments": null
        }
      ],
      "name": "apply_for_loan",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "application_id",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "interest_rate",
          "type": 15,
          "typeArguments": null
        },
        {
          "name": "collateral",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "approve_loan",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "user",
          "type": 6,
          "typeArguments": null
        }
      ],
      "name": "check_admin",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "application_id",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "check_application",
      "output": {
        "name": "",
        "type": 11,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "initialize",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "burn_amount",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "burn_coins",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Burn an amount of this contracts native asset."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "deposit",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Deposit tokens back into the contract."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "coins",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "asset_id",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "target",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "force_transfer_coins",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Transfer coins to a target contract."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "target",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "asset_id",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "get_balance",
      "output": {
        "name": "",
        "type": 14,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " Get the internal balance of a specific coin at a specific contract."
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "amount",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "recipient",
          "type": 10,
          "typeArguments": null
        }
      ],
      "name": "mint_and_send_to_address",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Mint and send this contracts native token to a destination address."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "amount",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "destination",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "mint_and_send_to_contract",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Mint and send this contracts native token to a destination contract."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "mint_amount",
          "type": 14,
          "typeArguments": null
        }
      ],
      "name": "mint_coins",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Mint an amount of this contracts native asset to the contracts balance."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "coins",
          "type": 14,
          "typeArguments": null
        },
        {
          "name": "asset_id",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "recipient",
          "type": 10,
          "typeArguments": null
        }
      ],
      "name": "transfer_coins_to_output",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " Transfer coins to a transaction output to be spent later."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": 0,
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": 1,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 2,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
}

export class ContractsInSwayAbi__factory {
  static readonly abi = _abi
  static createInterface(): ContractsInSwayAbiInterface {
    return new Interface(_abi) as unknown as ContractsInSwayAbiInterface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): ContractsInSwayAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as ContractsInSwayAbi
  }
}
