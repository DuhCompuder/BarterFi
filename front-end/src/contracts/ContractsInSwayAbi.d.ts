/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type AccessControlErrorInput = Enum<{ OnlyAdminsCanAccess: [], ApplicationNotApproved: [] }>;
export type AccessControlErrorOutput = AccessControlErrorInput;
export type ApplicationStateInput = Enum<{ Pending: [], Approved: [], Denied: [] }>;
export type ApplicationStateOutput = ApplicationStateInput;
export type ApplicationStatusEventInput = Enum<{ ApplicationApproved: [], ApplicationRejected: [] }>;
export type ApplicationStatusEventOutput = ApplicationStatusEventInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InitErrorInput = Enum<{ CannotReinitialize: [], NotInitialized: [] }>;
export type InitErrorOutput = InitErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ApplicationInput = { barrower: IdentityInput, requested_amount: BigNumberish, credit_score: BigNumberish, state: ApplicationStateInput, loan_id: Option<BigNumberish> };
export type ApplicationOutput = { barrower: IdentityOutput, requested_amount: BN, credit_score: number, state: ApplicationStateOutput, loan_id: Option<BN> };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;

interface ContractsInSwayAbiInterface extends Interface {
  functions: {
    apply_for_loan: FunctionFragment;
    approve_loan: FunctionFragment;
    check_admin: FunctionFragment;
    check_application: FunctionFragment;
    initialize: FunctionFragment;
    burn_coins: FunctionFragment;
    deposit: FunctionFragment;
    force_transfer_coins: FunctionFragment;
    get_balance: FunctionFragment;
    mint_and_send_to_address: FunctionFragment;
    mint_and_send_to_contract: FunctionFragment;
    mint_coins: FunctionFragment;
    transfer_coins_to_output: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'apply_for_loan', values: [IdentityInput, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'approve_loan', values: [BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'check_admin', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'check_application', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'burn_coins', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'force_transfer_coins', values: [BigNumberish, ContractIdInput, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_balance', values: [ContractIdInput, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint_and_send_to_address', values: [BigNumberish, AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint_and_send_to_contract', values: [BigNumberish, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint_coins', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer_coins_to_output', values: [BigNumberish, ContractIdInput, AddressInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'apply_for_loan', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approve_loan', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'check_admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'check_application', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'burn_coins', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'force_transfer_coins', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint_and_send_to_address', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint_and_send_to_contract', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint_coins', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_coins_to_output', data: BytesLike): DecodedValue;
}

export class ContractsInSwayAbi extends Contract {
  interface: ContractsInSwayAbiInterface;
  functions: {
    apply_for_loan: InvokeFunction<[barrower: IdentityInput, requested_amount: BigNumberish, credit_score: BigNumberish], BN>;
    approve_loan: InvokeFunction<[application_id: BigNumberish, interest_rate: BigNumberish, collateral: BigNumberish], void>;
    check_admin: InvokeFunction<[user: IdentityInput], boolean>;
    check_application: InvokeFunction<[application_id: BigNumberish], ApplicationOutput>;
    initialize: InvokeFunction<[], IdentityOutput>;
    burn_coins: InvokeFunction<[burn_amount: BigNumberish], void>;
    deposit: InvokeFunction<[], void>;
    force_transfer_coins: InvokeFunction<[coins: BigNumberish, asset_id: ContractIdInput, target: ContractIdInput], void>;
    get_balance: InvokeFunction<[target: ContractIdInput, asset_id: ContractIdInput], BN>;
    mint_and_send_to_address: InvokeFunction<[amount: BigNumberish, recipient: AddressInput], void>;
    mint_and_send_to_contract: InvokeFunction<[amount: BigNumberish, destination: ContractIdInput], void>;
    mint_coins: InvokeFunction<[mint_amount: BigNumberish], void>;
    transfer_coins_to_output: InvokeFunction<[coins: BigNumberish, asset_id: ContractIdInput, recipient: AddressInput], void>;
  };
}
